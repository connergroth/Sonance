"""Fresh migration after fixing env.py

Revision ID: eb889ef1fee5
Revises: 
Create Date: 2025-02-14 15:37:24.119981

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'eb889ef1fee5'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint('uq_album_compatibility', 'album_compatibilities', ['user_id_1', 'user_id_2', 'album_id'])
    op.create_unique_constraint('uq_artist_compatibility', 'artist_compatibilities', ['user_id_1', 'user_id_2', 'artist_id'])
    op.drop_column('artists', 'source')
    op.create_unique_constraint('uq_user_compatibility', 'compatibilities', ['user_id_1', 'user_id_2'])
    op.create_unique_constraint('uq_track_compatibility', 'track_compatibilities', ['user_id_1', 'user_id_2', 'track_id'])
    op.add_column('track_listening_histories', sa.Column('skipped', sa.Boolean(), nullable=False))
    op.add_column('track_listening_histories', sa.Column('liked', sa.Boolean(), nullable=False))
    op.add_column('track_listening_histories', sa.Column('last_played', sa.DateTime(), server_default=sa.text('now()'), nullable=True))
    op.create_unique_constraint('uq_user_track', 'track_listening_histories', ['user_id', 'track_id'])
    op.add_column('tracks', sa.Column('tempo', sa.Float(), nullable=True))
    op.add_column('tracks', sa.Column('energy', sa.Float(), nullable=True))
    op.add_column('tracks', sa.Column('valence', sa.Float(), nullable=True))
    op.add_column('tracks', sa.Column('danceability', sa.Float(), nullable=True))
    op.add_column('tracks', sa.Column('loudness', sa.Float(), nullable=True))
    op.add_column('tracks', sa.Column('speechiness', sa.Float(), nullable=True))
    op.add_column('tracks', sa.Column('acousticness', sa.Float(), nullable=True))
    op.add_column('tracks', sa.Column('instrumentalness', sa.Float(), nullable=True))
    op.drop_column('tracks', 'audio_features')
    op.drop_column('tracks', 'source')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('tracks', sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('tracks', sa.Column('audio_features', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.drop_column('tracks', 'instrumentalness')
    op.drop_column('tracks', 'acousticness')
    op.drop_column('tracks', 'speechiness')
    op.drop_column('tracks', 'loudness')
    op.drop_column('tracks', 'danceability')
    op.drop_column('tracks', 'valence')
    op.drop_column('tracks', 'energy')
    op.drop_column('tracks', 'tempo')
    op.drop_constraint('uq_user_track', 'track_listening_histories', type_='unique')
    op.drop_column('track_listening_histories', 'last_played')
    op.drop_column('track_listening_histories', 'liked')
    op.drop_column('track_listening_histories', 'skipped')
    op.drop_constraint('uq_track_compatibility', 'track_compatibilities', type_='unique')
    op.drop_constraint('uq_user_compatibility', 'compatibilities', type_='unique')
    op.add_column('artists', sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint('uq_artist_compatibility', 'artist_compatibilities', type_='unique')
    op.drop_constraint('uq_album_compatibility', 'album_compatibilities', type_='unique')
    # ### end Alembic commands ###
