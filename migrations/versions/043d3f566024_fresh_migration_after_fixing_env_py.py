"""Fresh migration after fixing env.py

Revision ID: 043d3f566024
Revises: 
Create Date: 2025-02-13 20:40:44.072512

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '043d3f566024'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('albums', sa.Column('tags', sa.JSON(), nullable=True))
    op.alter_column('albums', 'release_date',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.Date(),
               existing_nullable=True)
    op.alter_column('albums', 'aoty_score',
               existing_type=sa.INTEGER(),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('albums', 'play_count',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint('albums_artist_id_fkey', 'albums', type_='foreignkey')
    op.create_foreign_key(None, 'albums', 'artists', ['artist_id'], ['id'], ondelete='CASCADE')
    op.drop_column('albums', 'source')
    op.add_column('artists', sa.Column('tags', sa.JSON(), nullable=True))
    op.add_column('artists', sa.Column('image_url', sa.String(), nullable=True))
    op.alter_column('artists', 'aoty_score',
               existing_type=sa.INTEGER(),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('artists', 'play_count',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('artists', 'profile_picture')
    op.drop_column('artists', 'genres')
    op.add_column('recommendations', sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True))
    op.alter_column('recommendations', 'recommendation_score',
               existing_type=sa.INTEGER(),
               type_=sa.Float(),
               existing_nullable=False)
    op.drop_constraint('recommendations_user_id_fkey', 'recommendations', type_='foreignkey')
    op.drop_constraint('recommendations_album_id_fkey', 'recommendations', type_='foreignkey')
    op.drop_constraint('recommendations_artist_id_fkey', 'recommendations', type_='foreignkey')
    op.drop_constraint('recommendations_track_id_fkey', 'recommendations', type_='foreignkey')
    op.create_foreign_key(None, 'recommendations', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'recommendations', 'artists', ['artist_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'recommendations', 'albums', ['album_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'recommendations', 'tracks', ['track_id'], ['id'], ondelete='CASCADE')
    op.add_column('tracks', sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), nullable=True))
    op.alter_column('tracks', 'duration_ms',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('tracks', 'aoty_score',
               existing_type=sa.INTEGER(),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('tracks', 'play_count',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint('tracks_artist_id_fkey', 'tracks', type_='foreignkey')
    op.drop_constraint('tracks_album_id_fkey', 'tracks', type_='foreignkey')
    op.create_foreign_key(None, 'tracks', 'artists', ['artist_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'tracks', 'albums', ['album_id'], ['id'], ondelete='CASCADE')
    op.add_column('users', sa.Column('aoty_username', sa.String(), nullable=True))
    op.add_column('users', sa.Column('last_active', sa.DateTime(), nullable=True))
    op.add_column('users', sa.Column('profile_image_url', sa.String(), nullable=True))
    op.add_column('users', sa.Column('preferences', sa.JSON(), nullable=True))
    op.create_unique_constraint(None, 'users', ['aoty_username'])
    op.drop_column('users', 'source')
    op.drop_column('users', 'top_tracks')
    op.drop_column('users', 'top_artists')
    op.drop_column('users', 'top_albums')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('top_albums', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('top_artists', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('top_tracks', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_column('users', 'preferences')
    op.drop_column('users', 'profile_image_url')
    op.drop_column('users', 'last_active')
    op.drop_column('users', 'aoty_username')
    op.drop_constraint(None, 'tracks', type_='foreignkey')
    op.drop_constraint(None, 'tracks', type_='foreignkey')
    op.create_foreign_key('tracks_album_id_fkey', 'tracks', 'albums', ['album_id'], ['id'])
    op.create_foreign_key('tracks_artist_id_fkey', 'tracks', 'artists', ['artist_id'], ['id'])
    op.alter_column('tracks', 'play_count',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('tracks', 'aoty_score',
               existing_type=sa.Float(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('tracks', 'duration_ms',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('tracks', 'tags')
    op.drop_constraint(None, 'recommendations', type_='foreignkey')
    op.drop_constraint(None, 'recommendations', type_='foreignkey')
    op.drop_constraint(None, 'recommendations', type_='foreignkey')
    op.drop_constraint(None, 'recommendations', type_='foreignkey')
    op.create_foreign_key('recommendations_track_id_fkey', 'recommendations', 'tracks', ['track_id'], ['id'])
    op.create_foreign_key('recommendations_artist_id_fkey', 'recommendations', 'artists', ['artist_id'], ['id'])
    op.create_foreign_key('recommendations_album_id_fkey', 'recommendations', 'albums', ['album_id'], ['id'])
    op.create_foreign_key('recommendations_user_id_fkey', 'recommendations', 'users', ['user_id'], ['id'])
    op.alter_column('recommendations', 'recommendation_score',
               existing_type=sa.Float(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('recommendations', 'created_at')
    op.add_column('artists', sa.Column('genres', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('artists', sa.Column('profile_picture', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.alter_column('artists', 'play_count',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('artists', 'aoty_score',
               existing_type=sa.Float(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.drop_column('artists', 'image_url')
    op.drop_column('artists', 'tags')
    op.add_column('albums', sa.Column('source', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'albums', type_='foreignkey')
    op.create_foreign_key('albums_artist_id_fkey', 'albums', 'artists', ['artist_id'], ['id'])
    op.alter_column('albums', 'play_count',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('albums', 'aoty_score',
               existing_type=sa.Float(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('albums', 'release_date',
               existing_type=sa.Date(),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.drop_column('albums', 'tags')
    # ### end Alembic commands ###
